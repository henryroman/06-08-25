---
// src/components/blocks/BookingModal.astro
import { siteConfig } from '@/config/site.config.mjs';
const { components } = siteConfig;
const publishableKey = import.meta.env.PUBLIC_STRIPE_PUBLISHABLE_KEY;
---
<script src="https://js.stripe.com/basil/stripe.js"></script>

<!-- Booking Modal -->
<div id="booking" class="fixed inset-0 z-50 hidden" aria-hidden="true">
  <div class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm transition-opacity duration-300" onclick="window.closeBookingModal && window.closeBookingModal()" role="button" aria-label="Close overlay"></div>

  <div class="fixed inset-0 flex items-center justify-center p-4 sm:p-6 lg:p-8">
    <div id="modal-content" class="relative bg-white rounded-2xl shadow-2xl max-w-3xl w-full max-h-[90vh] overflow-hidden transform transition-all duration-300 scale-95 opacity-0">
      <header class="px-6 py-4 border-b">
        <div class="flex justify-between items-center">
          <h3 class="text-lg font-semibold">Book an Appointment</h3>
          <button aria-label="Close" onclick="window.closeBookingModal && window.closeBookingModal()" class="text-gray-500 hover:text-gray-700">&times;</button>
        </div>
      </header>

      <div class="px-6 py-6 sm:px-8 sm:py-8 max-h-[calc(90vh-200px)] overflow-y-auto">
        <form id="booking-form" class="space-y-6" novalidate>
          <!-- Personal Information -->
          <div class="grid sm:grid-cols-2 gap-4">
            <div>
              <label for="booking-name" class="block text-sm font-medium mb-1">Full name</label>
              <input id="booking-name" name="name" required class="w-full p-3 border rounded" type="text" placeholder="Jane Doe" autocomplete="name" />
            </div>
            <div>
              <label for="booking-phone" class="block text-sm font-medium mb-1">Phone</label>
              <input id="booking-phone" name="phone" required class="w-full p-3 border rounded" type="tel" placeholder="(555) 555-5555" autocomplete="tel" />
            </div>
            <div>
              <label for="booking-email" class="block text-sm font-medium mb-1">Email</label>
              <input id="booking-email" name="email" required class="w-full p-3 border rounded" type="email" placeholder="you@example.com" autocomplete="email" />
            </div>
            <div>
              <label for="booking-notes" class="block text-sm font-medium mb-1">Notes (optional)</label>
              <input id="booking-notes" name="notes" class="w-full p-3 border rounded" type="text" placeholder="Any details..." />
            </div>
          </div>

          <!-- Services -->
          <div>
            <h4 class="font-medium mb-2">Choose a service</h4>
            <div id="services-container" class="grid gap-3"></div>
          </div>

          <!-- Date & Time -->
          <div class="grid sm:grid-cols-2 gap-4">
            <div>
              <label for="appointment-date" class="block text-sm font-medium mb-1">Date</label>
              <input id="appointment-date" name="date" type="date" class="w-full p-3 border rounded" required />
            </div>
            <div>
              <label for="appointment-time" class="block text-sm font-medium mb-1">Time</label>
              <select id="appointment-time" name="time" class="w-full p-3 border rounded" disabled required>
                <option value="">Select a date first...</option>
              </select>
            </div>
          </div>

          <!-- Payment Options -->
          <div>
            <h4 class="font-medium mb-2">Payment option</h4>
            <div class="flex items-center gap-4">
              <label class="flex items-center gap-2">
                <input type="radio" name="paymentMode" value="pay_later" checked>
                <span>Pay later (in-store)</span>
              </label>
              <label class="flex items-center gap-2">
                <input id="pay-now-radio" type="radio" name="paymentMode" value="pay_now">
                <span>Pay now (10% off)</span>
              </label>
            </div>
            <div id="price-display" class="mt-3 text-sm text-gray-700"></div>
          </div>

          <!-- Hidden Fields -->
          <input type="hidden" id="booking-duration" name="duration" value="" />
          <input type="hidden" id="booking-price" name="price" value="" />

          <div id="booking-status" class="text-sm mt-1"></div>
        </form>
      </div>

      <div class="border-t px-6 py-4 bg-gray-50">
        <div class="flex gap-3">
          <button type="button" onclick="window.closeBookingModal && window.closeBookingModal()" class="flex-1 py-2 border rounded">Cancel</button>
          <button id="booking-submit" type="submit" form="booking-form" class="flex-1 py-2 rounded bg-primary-600 text-white">Continue</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ publishableKey }}>
(() => {
  const STRIPE_PK = publishableKey;

  // DOM Elements - using safe getElementById with proper checks
  const form = document.getElementById('booking-form');
  const dateInput = document.getElementById('appointment-date');
  const timeSelect = document.getElementById('appointment-time');

// ðŸ‘‡ NEW: make whole date box clickable
if (dateInput instanceof HTMLInputElement) {
  const dateWrapper = dateInput.closest('div');
  if (dateWrapper) {
    dateWrapper.addEventListener('click', (e) => {
      if (e.target !== dateInput) {
        dateInput.showPicker?.();
      }
    });
  }
}
  const servicesContainer = document.getElementById('services-container');
  const statusEl = document.getElementById('booking-status');
  const durationInput = document.getElementById('booking-duration');
  const priceInput = document.getElementById('booking-price');
  const submitBtn = document.getElementById('booking-submit');
  const priceDisplay = document.getElementById('price-display');
  const modalContent = document.getElementById('modal-content');

  // Set minimum date
  if (dateInput && dateInput instanceof HTMLInputElement) {
    const today = new Date().toISOString().split('T')[0];
    dateInput.setAttribute('min', today);
  }

  // Load services
  async function loadServices() {
    try {
      const res = await fetch('/api/services');
      const json = await res.json();
      let services = Array.isArray(json.services) ? json.services : (json || []);
      if (!services.length) {
        // Fallback to default services
        services = [
          { name: 'Manicure', duration: 45, price: '$45' },
          { name: 'Pedicure', duration: 60, price: '$55' },
          { name: 'Facial Treatment', duration: 90, price: '$85' }
        ];
      }
      renderServices(services);
    } catch (err) {
      console.error('loadServices error', err);
      renderServices([]);
    }
  }

  function escapeHtml(s) {
    return String(s).replace(/[&<>"']/g, function (m) {
      return ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'})[m];
    });
  }

  function renderServices(services) {
    if (!servicesContainer) return;
    if (!services || services.length === 0) {
      servicesContainer.innerHTML = `<div class="py-6 text-center text-gray-600">No services available</div>`;
      return;
    }

    servicesContainer.innerHTML = services.map((svc, i) => {
      const price = svc.price ? `<div class="text-sm font-semibold">${escapeHtml(String(svc.price))}</div>` : '';
      return `
        <label class="service-option flex items-center gap-3 p-3 border rounded cursor-pointer">
          <input type="radio" name="appointmentType" value="${escapeHtml(String(svc.name))}" data-duration="${svc.duration || 60}" data-price="${svc.price || ''}" class="sr-only"${i===0 ? ' required' : ''} />
          <div class="flex-1">
            <div class="font-medium">${escapeHtml(String(svc.name))}</div>
            <div class="text-sm text-gray-600">${svc.duration ?? 60} minutes</div>
          </div>
          ${price}
        </label>
      `;
    }).join('');

    // Add event listeners to service options
    Array.from(document.querySelectorAll('input[name="appointmentType"]')).forEach(el => {
      el.addEventListener('change', (ev) => {
        const target = ev.target;
        if (!(target instanceof HTMLInputElement)) return;

        // Update visual selection
        document.querySelectorAll('.service-option').forEach(s => s.classList.remove('border-primary-500','bg-primary-50'));
        const root = target.closest('label');
        if (root) root.classList.add('border-primary-500','bg-primary-50');

        // Update hidden fields
        if (durationInput instanceof HTMLInputElement) {
          durationInput.value = target.getAttribute('data-duration') || '';
        }
        if (priceInput instanceof HTMLInputElement) {
          priceInput.value = target.getAttribute('data-price') || '';
        }

        updatePriceDisplay();

        // Reset times when service changes
        if (timeSelect instanceof HTMLSelectElement) {
          timeSelect.innerHTML = '<option value="">Select a date first...</option>';
          timeSelect.disabled = true;
        }
      });
    });
  }

  function parsePriceStringToCents(priceStr) {
    if (!priceStr) return 0;
    const cleaned = String(priceStr).replace(/[^\d\.]/g, '');
    const f = parseFloat(cleaned || '0');
    if (Number.isNaN(f)) return 0;
    return Math.round(f * 100);
  }

  function getSelectedServicePriceCents() {
    const sel = document.querySelector('input[name="appointmentType"]:checked');
    if (sel instanceof HTMLInputElement) {
      const p = sel.getAttribute('data-price') || '';
      return parsePriceStringToCents(p);
    }
    return 0;
  }

  function updatePriceDisplay() {
    const baseCents = getSelectedServicePriceCents();
    const payNowEl = document.querySelector('input[name="paymentMode"][value="pay_now"]');
    const payingNow = (payNowEl instanceof HTMLInputElement) && payNowEl.checked;

    if (!priceDisplay) return;
    if (baseCents <= 0) {
      priceDisplay.innerHTML = 'Price not set';
      return;
    }

    const baseD = (baseCents / 100).toFixed(2);
    if (payingNow) {
      const discounted = Math.round(baseCents * 0.9);
      priceDisplay.innerHTML = `Pay now and save 10%: <strong>$${(discounted/100).toFixed(2)}</strong> <span class="text-sm text-gray-500"> (was $${baseD})</span>`;
      if (priceInput instanceof HTMLInputElement) priceInput.value = String(discounted);
    } else {
      priceDisplay.innerHTML = `Pay at store: <strong>$${baseD}</strong>`;
      if (priceInput instanceof HTMLInputElement) priceInput.value = String(baseCents);
    }
  }

  // Payment mode change listener
  document.addEventListener('change', (e) => {
    const t = e.target;
    if (t && (t.name === 'paymentMode' || t.name === 'appointmentType')) {
      updatePriceDisplay();
    }
  });

  // Date change handler - fetch available times
  if (dateInput instanceof HTMLInputElement && timeSelect instanceof HTMLSelectElement) {
    dateInput.addEventListener('change', async () => {
      const selectedDate = dateInput.value;
      if (!selectedDate) return;

      timeSelect.disabled = true;
      timeSelect.innerHTML = '<option>Loading...</option>';

      const dur = (durationInput instanceof HTMLInputElement && durationInput.value) ? Number(durationInput.value) : 60;

      try {
        const res = await fetch(`/api/availability?date=${encodeURIComponent(selectedDate)}&duration=${encodeURIComponent(String(dur))}`);
        const json = await res.json();
        const slots = Array.isArray(json.availableSlots) ? json.availableSlots : [];

        if (!slots.length) {
          timeSelect.innerHTML = '<option value="">No available times</option>';
          return;
        }

        timeSelect.innerHTML = '<option value="">Select time...</option>';
        slots.forEach(slot => {
          const iso = slot.iso || slot.time || slot;
          const display = slot.display || (new Date(iso).toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' }));
          const timeValue = new Date(iso).toTimeString().slice(0, 8);

          const opt = document.createElement('option');
          opt.value = timeValue;
          opt.textContent = display;
          timeSelect.appendChild(opt);
        });
        timeSelect.disabled = false;
      } catch (err) {
        timeSelect.innerHTML = '<option value="">Error loading times</option>';
      }
    });
  }

  // Form submission
  if (form instanceof HTMLFormElement) {
    form.addEventListener('submit', async (evt) => {
      evt.preventDefault();
      if (statusEl) statusEl.textContent = '';

      const fd = new FormData(form);
      const booking = Object.fromEntries(fd.entries());

      const required = ['name','email','phone','appointmentType','date','time'];
      if (required.some(k => !booking[k])) {
        if (statusEl) {
          statusEl.style.color = 'crimson';
          statusEl.textContent = `Please fill: ${required.filter(k => !booking[k]).join(', ')}`;
        }
        return;
      }

      if (submitBtn instanceof HTMLButtonElement) {
        submitBtn.disabled = true;
        submitBtn.dataset.orig = submitBtn.innerHTML;
        submitBtn.innerHTML = 'Processing...';
      }

      const paymentMode = (document.querySelector('input[name="paymentMode"]:checked')).value;

      try {
        if (paymentMode === 'pay_now') {
          // Create checkout session and redirect
          const resp = await fetch('/api/create-checkout-session', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              ...booking,
              priceCents: Number(booking.price || 0)
            })
          });
          const json = await resp.json();

          if (resp.ok && json.url) {
            window.location.href = json.url;
            return;
          } else {
            throw new Error(json.message || 'Failed to create payment session');
          }
        } else {
          // Pay later
          const res = await fetch('/api/booking', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ...booking, paid: false })
          });

          if (!res.ok) throw new Error((await res.json()).message);

          if (statusEl) {
            statusEl.style.color = 'green';
            statusEl.textContent = 'Booked successfully!';
          }

          setTimeout(() => {
            if (form instanceof HTMLFormElement) form.reset();
            if (window.closeBookingModal) window.closeBookingModal();
          }, 1500);
        }
      } catch (err) {
        const message = err instanceof Error ? err.message : 'An error occurred.';
        if (statusEl) {
          statusEl.style.color = 'crimson';
          statusEl.textContent = message;
        }
      } finally {
        if (submitBtn instanceof HTMLButtonElement) {
          submitBtn.disabled = false;
          submitBtn.innerHTML = submitBtn.dataset.orig || 'Continue';
        }
      }
    });
  }

  // Modal functions
  window.openBookingModal = function() {
    const modal = document.getElementById('booking');
    if (!modal) return;

    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';

    setTimeout(() => {
      if (modalContent) {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
      }
    }, 10);

    loadServices();
    updatePriceDisplay();
  };

  window.closeBookingModal = function() {
    const modal = document.getElementById('booking');
    if (!modal) return;

    if (modalContent) {
      modalContent.classList.remove('scale-100', 'opacity-100');
      modalContent.classList.add('scale-95', 'opacity-0');
    }

    setTimeout(() => {
      modal.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }, 250);
  };

  // Escape key handler
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && window.closeBookingModal) {
      window.closeBookingModal();
    }
  });

  // Load services on initial load if modal is visible
  if (!document.getElementById('booking')?.classList.contains('hidden')) {
    loadServices();
  }
})();
</script>

<style>
/* Additional styles if needed */
</style>
